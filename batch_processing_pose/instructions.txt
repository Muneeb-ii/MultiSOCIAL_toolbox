# This project extracts body keypoints from videos using YOLOv8 for detecting people and MediaPipe for extracting pose landmarks.

Supports:

- Windows 
- macOS 
- CPU and GPU acceleration

---

```bash
## Folder Structure

project_folder/
|‚îú‚Äî pose_extract.py
|‚îú‚Äî input/           # Place your .mp4 videos here
|‚îî‚Äî output/          # Extracted CSVs will be saved here (auto-created, no need to create)
```

---

## Setup Instructions

### 1. Install Python (if not already installed)

- Recommended Python version: **3.10**
- [Download Python](https://www.python.org/downloads/)

### 2. (Optional) Create Virtual Environment

**With Conda**:

```bash
conda create --name pose_env python=3.10
conda activate pose_env
```

**Without Conda (using venv)**:

```bash
python -m venv pose_env
# Windows:
pose_env\Scripts\activate
# macOS/Linux:
source pose_env/bin/activate
```

### 3. Install Required Packages

```bash

pip install opencv-python pandas mediapipe ultralytics sort
```

- If `sort` fails, it's optional for tracking (script will still work).

---

## üîß How to Run

1. Place your `.mp4` video files inside the `input/` folder.

2. Run the script:

```bash
python pose_extraction_optimized.py
```

- Outputs will be saved in `output/` folder automatically.
- Separate CSV for each person detected in each video (e.g. 2503_CoopLego_All_video_person_{person_ID}).

---

## üöÄ Settings that can be chnaged

Inside `pose_extract.py`, at the top:

```python
CONFIDENCE_THRESHOLD = 0.5    # (higher = stricter person detection, lower = detects more than two persons for low light)
USE_SORT_TRACKER = True       # (keep stable IDs across frames)
FRAME_SKIP = 2                # (process every 2nd frame, for faster processing of large files)
RESIZED_WIDTH = 640           # (resize frames smaller, for faster processing of large files in batch)
RESIZED_HEIGHT = 360          # (resize frames smaller, you can change this to original frame dimension)
```

Change these values if you want faster or stricter processing.

---

## üõ°Ô∏è Troubleshooting

### Common Issues on Windows

| Problem                                               | Solution                                                                        |
| ----------------------------------------------------- | ------------------------------------------------------------------------------- |
| Error: 'DLL load failed' or 'missing cudnn64\_\*.dll' | Install PyTorch GPU properly if you have NVIDIA. Otherwise, CPU fallback works. |
| Virtual environment activation fails                  | Use `pose_env\Scripts\activate` on Windows, NOT `source`.                       |
| FileNotFoundError on videos                           | Make sure `.mp4` videos are inside `input/` folder.                             |

### Common Issues on macOS

| Problem                            | Solution                                                                      |
| ---------------------------------- | ----------------------------------------------------------------------------- |
| cv2.VideoCapture cannot read video | Install ffmpeg via `brew install ffmpeg`                                      |
| Permission issues                  | Use `chmod +x` on files if needed.                                            |
| GPU not used                       | Most macOS only use CPU unless M1/M2 specific GPU support (still works fine). |

---

## üìÖ Notes

- This script **automatically selects** CPU or GPU based on availability.
- Frame skipping (`FRAME_SKIP=2`) and resizing (`640x360`) dramatically improve speed.
- You can increase `FRAME_SKIP=3` or more for faster but coarser outputs.
- YOLO model used: `yolov8n.pt` (small and fast).

---





